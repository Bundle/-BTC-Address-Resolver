<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="vanityAddresses" xml:space="preserve">
    <value>124bE9K8yGchWtbDMmyf5jS2qoAj7HuEfg
12BQnxCqB1XcyZXjosZWGwvrmxZ8CskEix
12EgxTYjiuNqkYkUvr2ERcdGNqoyeyvwnX
12TFVr2tbFRbRbLzCwTzG4PoCz2xxxnQLy
12ZfLyvswrKFafjRegbdokt8qwhVpXu47r
133sKYzMbU9k21oE7eL1ufwBcsQPvbrKGy
1351QXh9ia1EzVp1mBY2RDQrTURGsTd1PK
13MkThoTTKHaJaQYpprJqfQ6Bgspr4M5kf
13RjvtTVKQCDfTUuu9yw5yvtgT75pQJWWR
13TtUJUonskPuSbXFX8JyXWV1f8qtdhN67
13W5P1tRqw4Ft4fufRnfR7HzudWqmECmHW
13WU2Jg7i9unwtBorUdai5Zb2MwsmLXr18
13YQZ34apKbQ3jQ3D8YRoS75g9te9pnwPr
14b2cSv9NDheQ7y6a2N7LFdoFhgD1Mc3vN
14bF23qrTz1MYSWD5jJdzPftMtRTq6WtzV
14cZZgkKd3WWukCE5gorPUEN4cKyuLUqf4
14jn7MaF2UbeMdPkbVJF6sRsGRaUwSVSmt
14XLm5vHETfzw6KFuf7XH7Vi4YnbyVq33g
15c3WD22bK6EpKEnyf2y6qyL6SZDtCaS76
15grALVtNxdYqbrvg1AaQDCY8UtdecUR9D
16f4mnaSjRcE726T5AWXoQmw45EmxS7eAS
16gnFFWP6JY2Ak9V2g8YM8wHb4rdnB2Lue
171R5mDiX5eKGx8MJKPXC8suffHDYiu21
177dg2UPnFbGWnLhQMsemmyUe6f6quztPu
17e3Lbbrh8NnavfHtLLBAxR38eGamrb8A2
17NeSgbNxUYAwgFCMHvu5ut77ntKmNsLuy
17NWTNhhgfdjEALM4F2MWvyqjmsW5y3e7u
17vSHyBiquV53RGzXnEKdARzcQ3ssXovR7
17XRk84WR3vAg9eSiR64d4iE5ZRGfq3AE6
17yyVGiWK2b7gNDYtUs2PvpXrSLSHZ12vp
18C5TZSkczjTurXHBwL2i2nSZrVmDX2UrT
18D9hSiZyHu2QrzP3ekUiSgNm4RMwmYjtv
18gCjZszkfFoZKxH65TPCNDnLUMecWL15k
18o2okJp6Td195CJABnThcj6BHym3go1qz
18wnMyFbskJmUTQxQoLFGFjDx7VVyYwEYv
18yCMMmPKnDgpFB1BTagNRwcU4K7AVNezK
1937ugie2fdiXjHcoCmK4gHGP2WZbh1aFQ
19DeaYRnotQDpoYe8TjTHqs8Z4r5jHcDgv
19LGENsy3WPTupYM4TGdALYQ4AjBSEvJHd
1ANRZgSRyUGeggsFpVrdXYcWLTbQyXeJhC
1AQDXtSb18EocMneLEgCqczzquQ9CBkhhU
1ASM4kV7oqwLAnV5wxeb3gDxAfy4XvF91M
1BCC5oBbdU3HwnCtiiwYvNi9YwgzCJwTPD
1bikU7ZXEapEB5ZtY5rcpeijctHd7r5Dy
1BknmhpYu1Fck3hNLRgXjHGYqT5cYnNBgz
1BqRBpkztZGVx2oZTmofcP2wZeLr7f4Jtp
1BsokGxjPmP5Q16iALLPivt1ihLLCgHt9R
1BT2ruADrSW8KaZBAAjtWyrgLsFz92P4WP
1CaBDbfADUcTza876Te9qkpCWBSdDDgx3B
1Cj6gj9MNnTLsDQ3DiaAoTZe6WhZAGRbjA
1CNdMEVrS99tE6nBsvSrD9KHAqXLnesv3m
1CveGdEor1gBmkCdSxaAoMSQZRsChRc9tr
1CYHdWCt7NwVzgG1sRFkQgod4iFXezKL2z
1CysYbiigNWGC57ANfzRN7KSQBxjpZxsxd
1DdKDsY38u2p1R5RtWYWAAayPj3aeyXfaE
1DRmo7GWtkgRw27B5bqhCCCrYzqVQZ3LTw
1DTJa35AavkAaQxV61dceBRXJUg977rbxS
1E8G4A2uXo18Ar2QSUj4cnMeQELA3GfLip
1ELdXciHP73cJKJAo22od1twpg6ujnf5vR
1EntSqx4dh9xsN6YtsxRXw79A1GCWhQxHb
1FDjJwRair15P6uJvGCJBnUnL4B5fSFGXP
1Fk3LpWyUeFUopJAd6dk2C1VtydDuQerq4
1Fk9urvj1ynGhqCfk2EP84zmHVMXX9csFS
1FuWZ31h6LA7a8rua8S9uEQvMPaGXhWWWT
1G3v4Ec1subgmtPAJXDVwi3oAJWE5SJscR
1Gk55xpstyms5ipCXDxD6a8RtP3ZwcYr3Z
1GPGjGiuVkTfGX1xTnrQSgGrdi2767WTe1
1GraaYGf79ACDmQ4U5J6zij4HUbWiD7cbZ
1H2Wcjte7RhiwBWknvBpMdQV3EwVU4iSBU
1H5gayqzhMqGKUh82cJkEnEtbL4kPYDuZU
1HF1ckovw4SyMCKKo9RZc8YAKyMQpBUNMD
1HF8r6xM6cYKbXWeYncpBthVWFnnu7Gc4j
1HMKgawHGSLvfW2CABk1pj33F2fNQSAZko
1HoHAtM1f6KE8KuriWTE3e6Dzn1Nhitjep
1J9zU5DTiGEQMinb7AphLc1CYo2hZbpqg4
1Jny2D54LBx3uAZ9nSK2CHysy1UFeNF7kG
1JpWHvH9dqgHfueygQsrQgMBzhjtCptRws
1JQiY3wCaQNXpSqRgaFZEqqkReqiP3inhU
1K52zoyend1NQMnYFDAzycvKSkTNd2ZPw6
1K8XxbiJiW5cSR8gAfiJbP7QPbP6chKZfU
1KEvtZnPUy46o6t9HVrdVTwEw421BaL5zR
1KLo941YTDtY5M9qojzXRJSLmRjVjHm1MU
1KSW6mVoJfYF61bjajqqg6qLbd9XFQeztK
1KVnSnJskf4Q9qHq2wULM2ZnGAWdqw8pqt
1LtAn9Q3ZndjrJfGhL1idtF95nFtxh9bgY
1M3xiZcce5k7TnfcEPwwYg1fWjeUz4iu94
1MDoUVSJ5hVkaYxRL97Xp3muvc3eW4uDLy
1MRduc2mvrk44L1d8ReBvT4Nhot6KB1dgD
1MV7CWpeZvRQL27DoXpHGWXDTFGojpqWo5
1NbiaqXMSnuSJNgrS1DCJu4FNDsfYCrz4Z
1NmGCGQu1p59c1VbtaaTBufaRsGmaweYiV
1NmiQqwdJar5qib9CaLVzDUKdcCEukBCUj
1Nvd6gf8QsN1uYHQpsfvT4sbVu1q4x8G2q
1NwqD2VscQUsqWmmDJvvQTpo2G3uvr93sH
1Nzymu5NUKX2f71GAycHkRZR3cENQJsxDj
1P1j4ftqK4pQ9VZ9zEqce99Yhve7RMZZxK
1PBsDzN6EWz3WgSXchFGr7m89xhpR4CHzr
1PKPRSJv1tkRyyuc5SpLubGHQ9xRhQtaaX
1PPA2mAgHbmPufcbSgjWsrmLijS17yr1uS
1WBC8hSjeGUzCt6hrtKtNY6obBPUTfCGB
12dxMoFzvcabDuBtVg14kjyovQvW5HyRh1
12hqZRavAApii6AVY6Hi7mDVXfULoJFVCs
12inH7HdwsxcjeRr35mtMuypaT5newzdVP
12ttKFHokZGLQkwkcQ7omrKYRmJNwWQWZn
12wJFXH4YpaL8t2jHkWri3qVk8b3qdfygd
138bhfY2srQavb8L3bye1kbM5haj1KK6QA
13ioNnJ4jQcSqBoau5vft73vFmJJ9C1m4J
14hEX34chZFPMpKVdprsD1gWfEJoiQpyCD
14L7oYgTydo8nSt8zeL56rNeevUrKcVfS5
14tewHM1auzViFab9fr3eUNALBtxcez5Qr
14ZXuVGG2DTgkmebyeiU6iQup34WMDbTT2
14ZyfhuVp5G3jtYEDbwwPp3hETL28DoYTP
1513XFiddbmymKDD54Wg5wyX8oDJ8uQzq2
151yNRF4whWgcSFto8Tym4sTt6W5jU6G1E
158LPgHoja11UxAu6BrJPmVkEfCk54RdPr
15aJSsGXr1NTCZEdyvzHCohnsBpW2cQzfp
15G2rDQSzk9syduQEbWScGWiWFN8bijmdi
15HQfwdA7sM8aMjeyZoGYAJG82fwBjkbkG
15NgxjKymoqZ77wAjUskBNuEUvJ5qADPwP
16x1tWRfXiW52iCWLBLLWDfbXndsXNXkZM
16ZZe6USUDCwhEYi9mgVqWDVdbfXbmiREd
17gSBzTE3ztFWUJ21NcxPEEwet4psPVdwu
17nBrJr7GELq9nwQLJmm6QiLNHKRo4WvRq
17tZFL2Je2L4HvyCd74jfoBKHeN1rWVcWp
17z4XvcVKzCbkEG9Y8huHYCLHL7JPTayGm
185cub66eQo742hFBKrWExmPAJPWQxhgAc
18CB41FpLpjEH3YKw46GNJF3dCHNbqp63c
18iG134wNHSs9hLz7AzMYK3TgQRFQLeeBT
18Y6hpkvcg8FLvFpNAbzK4w7eRrVQLx8Ez
1987yBxu3wv9TvFocd1RSCsanXjrVU2Fw5
19DZLCuDiNw7Xwx1VQdfFkDnoxtJnVi7mW
19KEhCpbunUCfZqmCLhqoCNFS2RRwXCaEw
19rueuc51CyPgDS8jgNj3YaTzT4DycziRV
19uamsjv8GfMnBjE55rLEfjawJ7aCESGWF
1AJLYKkZG9brmuVUSVAKfuuZwqwRkTNVYG
1B3vHsRmksSfv5ScpDfmuejeiNsSACkjiG
1B4Zd5wzs82mdUbcfuNQNHdJ3pQnFqGRjj
1BjDVximBsgKT3s7cx8DYgnFPgkToDKmms
1BwdZBjM1aECDhjWdusGG7Ft2fL7y6F2nJ
1C227QPv5G9BE5aJ9hCLfhnp2xMfaYtWq8
1C2Cx6Qu6AJCrvJoLgXhiFNRDXVRpAdHRn
1CefRz3Lp9S9xm2Fj9EScfj6FqEswvYeHk
1CiCBsHHDM8K5QmLwfecD2RR9DEJpAKd8V
1CnxXrCfqMhsYwGkuhgVPmdmFuCwfzZjZ1
1CoycHnYHqpXwNwL7sEtYhqiFA314tzxCF
1CxuyYWkX9r89zEa3qQNneHSR3hn67Tnrp
1D39LUsALA1Gdd53bwtk9Sdi8FV5Pmfuqd
1DbLmCpobEcMq88YVxah4P2WKaZKWPQQr
1DGPFWiaCGmqPN5MDLq8pquZLbzCQ5FqD4
1DKp8o6cMQUvbYDFmmLcLpkaQQFMk9mMFz
1DoY1vCUN8AX4zaysCmt4pd9FfeojcsqNY
1DpVKBJn855EtNXy5LjfBbzx3yYviRogpJ
1DyvRYcoghYXM98LgyeB2Yddfn3VSYMWSy
1DZGfk4EF4gj3L9KUsg9EYgWEj5LirPMjV
1E5WsKMtmv17CMjUNaKWPw1tHYCxxvDETa
1e6HV4Xyssq3p1vCRfaYR91iFvbyHn7XB
1EdxAa6fypxXihbcwHvNk4bsbW9k5mKdsL
1EghoJLQ6BrUv2QB9EAPHi4tayQSMicNMW
1EoJ4Dmj2Louu1Wcf4uMnokNz2kTzxyxV9
1Er4G3xNSshppH6keehQsdo1LCtk1soPNY
1EtqD1THBLJLrDN9qc2wVsFH2EvpcnMRkg
1EWrm6VUXG1BU5qVg457tHVHJikMaRVea8
1F3bALsfUH99wpnpBv8YjfzefJyPj2fdeG
1F4jtnzbmbAq16XhTUZQX8YTy9iFziVMcp
1F4pzqBouDAW27SmyeGTBQXW8TmEf4wxd2
1FBS7bcEaBzrjscbpbvGm8EvYoiWyjyhho
1FbybU3Qxd96RrQhzQdvKD4kupsNUYCBHW
1Fh7F7DmtdhcbHGDGQ5tQjtiBXow6btXBB
1FjYB22MQuSfLZrH6S8XXXyc4e4BWiSgvm
1FK8H9f851V4rUHazadToNXNtSs4iPJHMn
1FKU84H7rJzeduXaeu5T9eFsagmqkwLec1
1G4peV2MYRa4R5bGArpqwCZJNbWRMXL2jN
1GhDW5vUdFQwvVhau7Vs8dwcQUqMLbnkhz
1GnH3vq6SvQSKVG75NDyPhacs7Lvn58ei9
1GR6XRWun8CDKT1KbAVp79BdcJXVtiTp7H
1H19SWLKvJ2UQZb5U6d1wxJ8L4X6B5byWZ
1HDnPZkQ4m4ZmiiTFW1rzeR7yfUbnVS4Tu
1HPgnGj85cYkgZLEPsGcYQvzaGaXLR5p46
1HRTBtrfHKi2UtZux8syR7xWx4o6EVgc9n
1J5BmeoGtm2KcwJV7RfePy82J85guLYjL6
1J8WB8pod2Zub4fugj5jMqcYdCHJEquekN
1KfBaULi3ipUFBCK7BDexMtXnkKRQ4qh5E
1L6SKcXrGky5ehV7XgsGgoKHX6tnstBTwr
1LLQ234VG9KBi3ys3nSd6DP8Z46EX1GM2f
1M3Gd1NcBcAaN9WWGWwtk7RLjBqo3HGfXF
1M7PytJg7r1e8un8L4K9LDcYvQrYm4RoGM
1Md6WXDEZFBcsfvuHQtRutEtgZuMP7AYig
1MHx4M5pM27VL7wQBNXzoJYVNENw3yjCh9
1Mk3RotYVGPMmBkv5ARzhsNSZgeigb3dAs
1Mrh2Qo7EKfPMQWJbknPMjo9iYkMxG4RXV
1MX2BCcF2iFjQ8o9Qu6zydyQNF2RN17P78
1N2ygBLAAocGqbodTbTV58kSLZXnjEJ1BB
1N6ESVVHmgvB4GLW4n3J1ypojQCSKw6TWL
1NcFDGV37w2DK6stRnASP1C1tPN8zmuCFo
1PF9uH9NR11aibabqpoMRBGeESwftwXJnD
1PsHtgdi5XGJNZpS92tiWpnwcWZJQBcwnK
1PVGbd758DRZRfP4Xn9aaHgPX3WuNTvR3e
1Q4v6ri3b6ZjMJUAbKuH6Stibm79ey22ae
1SC9Y5HGNJTK1SsY6xfZhqaUSM2gpwe1s
1VcHCeAV1XyV8SCjRod7WDd4isfZEcYGr</value>
  </data>
</root>